export default EspressoDriver;
/**
 * @satisfies {import('@appium/types').ExternalDriver<
 *   import('./constraints').EspressoConstraints,
 *   string,
 *   import('@appium/types').StringRecord
 * >}
 */
export class EspressoDriver extends AndroidDriver {
    static newMethodMap: {
        readonly '/session/:sessionId/appium/device/get_clipboard': {
            readonly POST: {
                readonly command: "getClipboard";
                readonly payloadParams: {
                    readonly optional: readonly ["contentType"];
                };
            };
        };
        readonly '/session/:sessionId/timeouts/implicit_wait': {
            readonly POST: {
                readonly command: "implicitWait";
                readonly payloadParams: {
                    readonly required: readonly ["ms"];
                };
            };
        };
        readonly '/session/:sessionId/ime/available_engines': {
            readonly GET: {
                readonly command: "availableIMEEngines";
            };
        };
        readonly '/session/:sessionId/ime/active_engine': {
            readonly GET: {
                readonly command: "getActiveIMEEngine";
            };
        };
        /** @type {import('@appium/types').RouteMatcher[]} */
        readonly '/session/:sessionId/ime/activated': {
            readonly GET: {
                readonly command: "isIMEActivated";
            };
        };
        readonly '/session/:sessionId/ime/deactivate': {
            readonly POST: {
                readonly command: "deactivateIMEEngine";
            };
        };
        readonly '/session/:sessionId/ime/activate': {
            readonly POST: {
                readonly command: "activateIMEEngine";
                readonly payloadParams: {
                    readonly required: readonly ["engine"];
                };
            };
        };
        readonly '/session/:sessionId/window/:windowhandle/size': {
            readonly GET: {
                readonly command: "getWindowSize";
            };
        };
        readonly '/session/:sessionId/keys': {
            readonly POST: {
                readonly command: "keys";
                readonly payloadParams: {
                    readonly required: readonly ["value"];
                };
            };
        };
        readonly '/session/:sessionId/element/:elementId/location': {
            readonly GET: {
                readonly command: "getLocation";
            };
        };
        readonly '/session/:sessionId/element/:elementId/location_in_view': {
            readonly GET: {
                readonly command: "getLocationInView";
            };
        };
        readonly '/session/:sessionId/element/:elementId/size': {
            readonly GET: {
                readonly command: "getSize";
            };
        };
        readonly '/session/:sessionId/touch/click': {
            readonly POST: {
                readonly command: "click";
                readonly payloadParams: {
                    readonly required: readonly ["element"];
                };
            };
        };
        readonly '/session/:sessionId/touch/down': {
            readonly POST: {
                readonly command: "touchDown";
                readonly payloadParams: {
                    readonly required: readonly ["x", "y"];
                };
            };
        };
        readonly '/session/:sessionId/touch/up': {
            readonly POST: {
                readonly command: "touchUp";
                readonly payloadParams: {
                    readonly required: readonly ["x", "y"];
                };
            };
        };
        readonly '/session/:sessionId/touch/move': {
            readonly POST: {
                readonly command: "touchMove";
                readonly payloadParams: {
                    readonly required: readonly ["x", "y"];
                };
            };
        };
        readonly '/session/:sessionId/touch/longclick': {
            readonly POST: {
                readonly command: "touchLongClick";
                readonly payloadParams: {
                    readonly required: readonly ["elements"];
                };
            };
        };
        readonly '/session/:sessionId/touch/flick': {
            readonly POST: {
                readonly command: "flick";
                readonly payloadParams: {
                    readonly optional: readonly ["element", "xspeed", "yspeed", "xoffset", "yoffset", "speed"];
                };
            };
        };
        readonly '/session/:sessionId/touch/perform': {
            readonly POST: {
                readonly command: "performTouch";
                readonly payloadParams: {
                    readonly wrap: "actions";
                    readonly required: readonly ["actions"];
                };
            };
        };
        readonly '/session/:sessionId/touch/multi/perform': {
            readonly POST: {
                readonly command: "performMultiAction";
                readonly payloadParams: {
                    readonly required: readonly ["actions"];
                    readonly optional: readonly ["elementId"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/lock': {
            readonly POST: {
                readonly command: "lock";
                readonly payloadParams: {
                    readonly optional: readonly ["seconds"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/unlock': {
            readonly POST: {
                readonly command: "unlock";
            };
        };
        readonly '/session/:sessionId/appium/device/is_locked': {
            readonly POST: {
                readonly command: "isLocked";
            };
        };
        readonly '/session/:sessionId/appium/start_recording_screen': {
            readonly POST: {
                readonly command: "startRecordingScreen";
                readonly payloadParams: {
                    readonly optional: readonly ["options"];
                };
            };
        };
        readonly '/session/:sessionId/appium/stop_recording_screen': {
            readonly POST: {
                readonly command: "stopRecordingScreen";
                readonly payloadParams: {
                    readonly optional: readonly ["options"];
                };
            };
        };
        readonly '/session/:sessionId/appium/performanceData/types': {
            readonly POST: {
                /** @type {string|null} */
                readonly command: "getPerformanceDataTypes";
            };
        };
        readonly '/session/:sessionId/appium/getPerformanceData': {
            readonly POST: {
                readonly command: "getPerformanceData";
                readonly payloadParams: {
                    readonly required: readonly ["packageName", "dataType"];
                    readonly optional: readonly ["dataReadTimeout"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/press_keycode': {
            readonly POST: {
                readonly command: "pressKeyCode";
                readonly payloadParams: {
                    readonly required: readonly ["keycode"];
                    readonly optional: readonly ["metastate", "flags"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/long_press_keycode': {
            readonly POST: {
                readonly command: "longPressKeyCode";
                readonly payloadParams: {
                    readonly required: readonly ["keycode"];
                    readonly optional: readonly ["metastate", "flags"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/finger_print': {
            readonly POST: {
                readonly command: "fingerprint";
                readonly payloadParams: {
                    readonly required: readonly ["fingerprintId"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/send_sms': {
            readonly POST: {
                readonly command: "sendSMS";
                readonly payloadParams: {
                    readonly required: readonly ["phoneNumber", "message"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/gsm_call': {
            readonly POST: {
                readonly command: "gsmCall";
                readonly payloadParams: {
                    readonly required: readonly ["phoneNumber", "action"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/gsm_signal': {
            readonly POST: {
                readonly command: "gsmSignal";
                readonly payloadParams: {
                    readonly required: readonly ["signalStrength"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/gsm_voice': {
            readonly POST: {
                readonly command: "gsmVoice";
                readonly payloadParams: {
                    readonly required: readonly ["state"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/power_capacity': {
            readonly POST: {
                readonly command: "powerCapacity";
                readonly payloadParams: {
                    readonly required: readonly ["percent"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/power_ac': {
            readonly POST: {
                readonly command: "powerAC";
                readonly payloadParams: {
                    readonly required: readonly ["state"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/network_speed': {
            readonly POST: {
                readonly command: "networkSpeed";
                readonly payloadParams: {
                    readonly required: readonly ["netspeed"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/keyevent': {
            readonly POST: {
                readonly command: "keyevent";
                readonly payloadParams: {
                    readonly required: readonly ["keycode"];
                    readonly optional: readonly ["metastate"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/current_activity': {
            readonly GET: {
                readonly command: "getCurrentActivity";
            };
        };
        readonly '/session/:sessionId/appium/device/current_package': {
            readonly GET: {
                readonly command: "getCurrentPackage";
            };
        };
        readonly '/session/:sessionId/appium/device/app_state': {
            readonly POST: {
                readonly command: "queryAppState";
                readonly payloadParams: {
                    readonly required: readonly [readonly ["appId"], readonly ["bundleId"]];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/toggle_airplane_mode': {
            readonly POST: {
                readonly command: "toggleFlightMode";
            };
        };
        readonly '/session/:sessionId/appium/device/toggle_data': {
            readonly POST: {
                readonly command: "toggleData";
            };
        };
        readonly '/session/:sessionId/appium/device/toggle_wifi': {
            readonly POST: {
                readonly command: "toggleWiFi";
            };
        };
        readonly '/session/:sessionId/appium/device/toggle_location_services': {
            readonly POST: {
                readonly command: "toggleLocationServices";
            };
        };
        readonly '/session/:sessionId/appium/device/open_notifications': {
            readonly POST: {
                readonly command: "openNotifications";
            };
        };
        readonly '/session/:sessionId/appium/device/start_activity': {
            readonly POST: {
                readonly command: "startActivity";
                readonly payloadParams: {
                    readonly required: readonly ["appPackage", "appActivity"];
                    readonly optional: readonly ["appWaitPackage", "appWaitActivity", "intentAction", "intentCategory", "intentFlags", "optionalIntentArguments", "dontStopAppOnReset"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/system_bars': {
            readonly GET: {
                readonly command: "getSystemBars";
            };
        };
        readonly '/session/:sessionId/appium/device/display_density': {
            readonly GET: {
                readonly command: "getDisplayDensity";
            };
        };
        readonly '/session/:sessionId/appium/app/launch': {
            readonly POST: {
                readonly command: "launchApp";
            };
        };
        readonly '/session/:sessionId/appium/app/close': {
            readonly POST: {
                readonly command: "closeApp";
            };
        };
        readonly '/session/:sessionId/appium/app/reset': {
            readonly POST: {
                readonly command: "reset";
            };
        };
        readonly '/session/:sessionId/appium/app/background': {
            readonly POST: {
                readonly command: "background";
                readonly payloadParams: {
                    readonly required: readonly ["seconds"];
                };
            };
        };
        readonly '/session/:sessionId/appium/app/strings': {
            readonly POST: {
                readonly command: "getStrings";
                readonly payloadParams: {
                    readonly optional: readonly ["language", "stringFile"];
                };
            };
        };
        readonly '/session/:sessionId/appium/element/:elementId/value': {
            readonly POST: {
                readonly command: "setValueImmediate";
                readonly payloadParams: {
                    readonly required: readonly ["text"];
                };
            };
        };
        readonly '/session/:sessionId/appium/element/:elementId/replace_value': {
            readonly POST: {
                readonly command: "replaceValue";
                readonly payloadParams: {
                    readonly required: readonly ["text"];
                };
            };
        };
    };
    constructor(opts?: {}, shouldValidateCaps?: boolean);
    /** @type {string|null} */
    _originalIme: string | null;
    /** @type {import('./types').EspressoDriverOpts} */
    opts: import('./types').EspressoDriverOpts;
    /** @type {import('./types').EspressoDriverCaps} */
    caps: import('./types').EspressoDriverCaps;
    /** @type {EspressoRunner} */
    espresso: EspressoRunner;
    desiredCapConstraints: {
        readonly platformName: {
            readonly isString: true;
            readonly inclusionCaseInsensitive: readonly ["Android"];
            readonly presence: true;
        };
        readonly deviceName: {
            readonly isString: true;
        };
        readonly appActivity: {
            readonly isString: true;
        };
        readonly appPackage: {
            readonly isString: true;
        };
        readonly appWaitActivity: {
            readonly isString: true;
        };
        readonly appWaitPackage: {
            readonly isString: true;
        };
        readonly appWaitDuration: {
            readonly isNumber: true;
        };
        readonly deviceReadyTimeout: {
            readonly isNumber: true;
        };
        readonly androidDeviceReadyTimeout: {
            readonly isNumber: true;
        };
        readonly androidDeviceSocket: {
            readonly isString: true;
        };
        readonly androidInstallTimeout: {
            readonly isNumber: true;
        };
        readonly adbPort: {
            readonly isNumber: true;
        };
        readonly remoteAdbHost: {
            readonly isString: true;
        };
        readonly adbExecTimeout: {
            readonly isNumber: true;
        };
        readonly avd: {
            readonly isString: true;
        };
        readonly avdLaunchTimeout: {
            readonly isNumber: true;
        };
        readonly avdReadyTimeout: {
            readonly isNumber: true;
        };
        readonly avdArgs: {};
        readonly avdEnv: {
            /** @type {import('@appium/types').RouteMatcher[]} */
            readonly isObject: true;
        };
        readonly useKeystore: {
            readonly isBoolean: true;
        };
        readonly keystorePath: {
            readonly isString: true;
        };
        readonly keystorePassword: {
            readonly isString: true;
        };
        readonly keyAlias: {
            readonly isString: true;
        };
        readonly keyPassword: {
            readonly isString: true;
        };
        readonly webviewDevtoolsPort: {
            readonly isNumber: true;
        };
        readonly ensureWebviewsHavePages: {
            readonly isBoolean: true;
        };
        readonly enableWebviewDetailsCollection: {
            readonly isBoolean: true;
        };
        readonly chromedriverPort: {
            readonly isNumber: true;
        };
        readonly chromedriverPorts: {
            readonly isArray: true;
        };
        readonly chromedriverArgs: {
            readonly isObject: true;
        };
        readonly chromedriverExecutable: {
            readonly isString: true;
        };
        readonly chromedriverExecutableDir: {
            readonly isString: true;
        };
        readonly chromedriverChromeMappingFile: {
            readonly isString: true;
        };
        readonly chromedriverUseSystemExecutable: {
            readonly isBoolean: true;
        };
        readonly chromedriverDisableBuildCheck: {
            readonly isBoolean: true;
        };
        readonly chromeLoggingPrefs: {
            readonly isObject: true;
        };
        readonly autoWebviewTimeout: {
            readonly isNumber: true;
        };
        readonly autoWebviewName: {
            readonly isString: true;
        };
        readonly intentAction: {
            readonly isString: true;
        };
        readonly intentCategory: {
            readonly isString: true;
        };
        readonly intentFlags: {
            readonly isString: true;
        };
        readonly optionalIntentArguments: {
            readonly isString: true;
        };
        readonly dontStopAppOnReset: {
            readonly isBoolean: true;
        };
        readonly unicodeKeyboard: {
            readonly isBoolean: true;
        };
        readonly hideKeyboard: {
            readonly isBoolean: true;
        };
        readonly noSign: {
            readonly isBoolean: true;
        };
        readonly recreateChromeDriverSessions: {
            readonly isBoolean: false;
        };
        readonly autoLaunch: {
            readonly isBoolean: true;
        };
        readonly nativeWebScreenshot: {
            readonly isBoolean: true;
        };
        readonly clearSystemFiles: {
            readonly isBoolean: true;
        };
        readonly extractChromeAndroidPackageFromContextName: {
            readonly isBoolean: true;
        };
        readonly autoGrantPermissions: {
            readonly isBoolean: true;
        };
        readonly networkSpeed: {
            readonly isString: true;
        };
        readonly gpsEnabled: {
            readonly isBoolean: true;
        };
        readonly isHeadless: {
            readonly isBoolean: true;
        };
        readonly showChromedriverLog: {
            readonly isBoolean: true;
        };
        readonly skipUnlock: {
            readonly isBoolean: true;
        };
        readonly clearDeviceLogsOnStart: {
            readonly isBoolean: true;
        };
        readonly unlockType: {
            readonly isString: true;
        };
        readonly unlockKey: {
            readonly isString: true;
        };
        readonly unlockStrategy: {
            readonly isString: true;
            readonly inclusionCaseInsensitive: readonly ["locksettings", "uiautomator"];
        };
        readonly otherApps: {
            readonly isString: true;
        };
        readonly uninstallOtherPackages: {
            readonly isString: true;
        };
        readonly allowTestPackages: {
            readonly isBoolean: true;
        };
        readonly pageLoadStrategy: {
            readonly isString: true;
        };
        readonly localeScript: {
            readonly isString: true;
        };
        readonly skipDeviceInitialization: {
            readonly isBoolean: true;
        };
        readonly remoteAppsCacheLimit: {
            readonly isNumber: true;
        };
        readonly buildToolsVersion: {
            readonly isString: true;
        };
        readonly skipLogcatCapture: {
            readonly isBoolean: true;
        };
        readonly chromeOptions: {
            readonly isObject: true;
        };
        readonly enablePerformanceLogging: {
            readonly isBoolean: true;
        };
        readonly userProfile: {
            readonly isNumber: true;
        };
        readonly browserName: {
            readonly isString: true;
        };
        readonly enforceAppInstall: {
            readonly isBoolean: true;
        };
        readonly suppressKillServer: {
            readonly isBoolean: true;
        };
        readonly allowOfflineDevices: {
            readonly isBoolean: true;
        };
        readonly ignoreHiddenApiPolicyError: {
            readonly isBoolean: true;
        };
        readonly unlockSuccessTimeout: {
            readonly isNumber: true;
        };
        readonly mockLocationApp: {
            readonly isString: true;
        };
        readonly logcatFormat: {
            readonly isString: true;
        };
        readonly logcatFilterSpecs: {
            readonly isArray: true;
        };
        readonly allowDelayAdb: {
            readonly isBoolean: true;
        };
        readonly ignoreUnimportantViews: {
            readonly isBoolean: true;
        };
        readonly disableWindowAnimation: {
            readonly isBoolean: true;
        };
        readonly appWaitForLaunch: {
            readonly isBoolean: true;
        };
        readonly systemPort: {
            readonly isNumber: true;
        };
        readonly launchTimeout: {
            readonly isNumber: true;
        };
        readonly forceEspressoRebuild: {
            readonly isBoolean: true;
        };
        readonly espressoServerLaunchTimeout: {
            readonly isNumber: true;
        };
        readonly espressoBuildConfig: {
            readonly isString: true;
        };
        readonly showGradleLog: {
            readonly isBoolean: true;
        };
        readonly skipServerInstallation: {
            readonly isBoolean: true;
        };
        readonly intentOptions: {
            readonly isObject: true;
        };
        readonly disableSuppressAccessibilityService: {
            readonly isBoolean: true;
        };
        readonly activityOptions: {
            readonly isObject: true;
        };
        readonly appLocale: {
            readonly isObject: true;
        };
    };
    settings: DeviceSettings<{}>;
    chromedriver: import("appium-chromedriver").default | undefined;
    createSession(...args: any[]): Promise<(string | import("@appium/types").DriverCaps<{
        readonly platformName: {
            readonly isString: true;
            readonly inclusionCaseInsensitive: readonly ["Android"];
            readonly presence: true;
        };
        readonly deviceName: {
            readonly isString: true;
        };
        readonly appActivity: {
            readonly isString: true;
        };
        readonly appPackage: {
            readonly isString: true;
        };
        readonly appWaitActivity: {
            readonly isString: true;
        };
        readonly appWaitPackage: {
            readonly isString: true;
        };
        readonly appWaitDuration: {
            readonly isNumber: true;
        };
        readonly deviceReadyTimeout: {
            readonly isNumber: true;
        };
        readonly androidDeviceReadyTimeout: {
            readonly isNumber: true;
        };
        readonly androidDeviceSocket: {
            readonly isString: true;
        };
        readonly androidInstallTimeout: {
            readonly isNumber: true;
        };
        readonly adbPort: {
            readonly isNumber: true;
        };
        readonly remoteAdbHost: {
            readonly isString: true;
        };
        readonly adbExecTimeout: {
            readonly isNumber: true;
        };
        readonly avd: {
            readonly isString: true;
        };
        readonly avdLaunchTimeout: {
            readonly isNumber: true;
        };
        readonly avdReadyTimeout: {
            readonly isNumber: true;
        };
        readonly avdArgs: {};
        readonly avdEnv: {
            /** @type {import('@appium/types').RouteMatcher[]} */
            readonly isObject: true;
        };
        readonly useKeystore: {
            readonly isBoolean: true;
        };
        readonly keystorePath: {
            readonly isString: true;
        };
        readonly keystorePassword: {
            readonly isString: true;
        };
        readonly keyAlias: {
            readonly isString: true;
        };
        readonly keyPassword: {
            readonly isString: true;
        };
        readonly webviewDevtoolsPort: {
            readonly isNumber: true;
        };
        readonly ensureWebviewsHavePages: {
            readonly isBoolean: true;
        };
        readonly enableWebviewDetailsCollection: {
            readonly isBoolean: true;
        };
        readonly chromedriverPort: {
            readonly isNumber: true;
        };
        readonly chromedriverPorts: {
            readonly isArray: true;
        };
        readonly chromedriverArgs: {
            readonly isObject: true;
        };
        readonly chromedriverExecutable: {
            readonly isString: true;
        };
        readonly chromedriverExecutableDir: {
            readonly isString: true;
        };
        readonly chromedriverChromeMappingFile: {
            readonly isString: true;
        };
        readonly chromedriverUseSystemExecutable: {
            readonly isBoolean: true;
        };
        readonly chromedriverDisableBuildCheck: {
            readonly isBoolean: true;
        };
        readonly chromeLoggingPrefs: {
            readonly isObject: true;
        };
        readonly autoWebviewTimeout: {
            readonly isNumber: true;
        };
        readonly autoWebviewName: {
            readonly isString: true;
        };
        readonly intentAction: {
            readonly isString: true;
        };
        readonly intentCategory: {
            readonly isString: true;
        };
        readonly intentFlags: {
            readonly isString: true;
        };
        readonly optionalIntentArguments: {
            readonly isString: true;
        };
        readonly dontStopAppOnReset: {
            readonly isBoolean: true;
        };
        readonly unicodeKeyboard: {
            readonly isBoolean: true;
        };
        readonly hideKeyboard: {
            readonly isBoolean: true;
        };
        readonly noSign: {
            readonly isBoolean: true;
        };
        readonly recreateChromeDriverSessions: {
            readonly isBoolean: false;
        };
        readonly autoLaunch: {
            readonly isBoolean: true;
        };
        readonly nativeWebScreenshot: {
            readonly isBoolean: true;
        };
        readonly clearSystemFiles: {
            readonly isBoolean: true;
        };
        readonly extractChromeAndroidPackageFromContextName: {
            readonly isBoolean: true;
        };
        readonly autoGrantPermissions: {
            readonly isBoolean: true;
        };
        readonly networkSpeed: {
            readonly isString: true;
        };
        readonly gpsEnabled: {
            readonly isBoolean: true;
        };
        readonly isHeadless: {
            readonly isBoolean: true;
        };
        readonly showChromedriverLog: {
            readonly isBoolean: true;
        };
        readonly skipUnlock: {
            readonly isBoolean: true;
        };
        readonly clearDeviceLogsOnStart: {
            readonly isBoolean: true;
        };
        readonly unlockType: {
            readonly isString: true;
        };
        readonly unlockKey: {
            readonly isString: true;
        };
        readonly unlockStrategy: {
            readonly isString: true;
            readonly inclusionCaseInsensitive: readonly ["locksettings", "uiautomator"];
        };
        readonly otherApps: {
            readonly isString: true;
        };
        readonly uninstallOtherPackages: {
            readonly isString: true;
        };
        readonly allowTestPackages: {
            readonly isBoolean: true;
        };
        readonly pageLoadStrategy: {
            readonly isString: true;
        };
        readonly localeScript: {
            readonly isString: true;
        };
        readonly skipDeviceInitialization: {
            readonly isBoolean: true;
        };
        readonly remoteAppsCacheLimit: {
            readonly isNumber: true;
        };
        readonly buildToolsVersion: {
            readonly isString: true;
        };
        readonly skipLogcatCapture: {
            readonly isBoolean: true;
        };
        readonly chromeOptions: {
            readonly isObject: true;
        };
        readonly enablePerformanceLogging: {
            readonly isBoolean: true;
        };
        readonly userProfile: {
            readonly isNumber: true;
        };
        readonly browserName: {
            readonly isString: true;
        };
        readonly enforceAppInstall: {
            readonly isBoolean: true;
        };
        readonly suppressKillServer: {
            readonly isBoolean: true;
        };
        readonly allowOfflineDevices: {
            readonly isBoolean: true;
        };
        readonly ignoreHiddenApiPolicyError: {
            readonly isBoolean: true;
        };
        readonly unlockSuccessTimeout: {
            readonly isNumber: true;
        };
        readonly mockLocationApp: {
            readonly isString: true;
        };
        readonly logcatFormat: {
            readonly isString: true;
        };
        readonly logcatFilterSpecs: {
            readonly isArray: true;
        };
        readonly allowDelayAdb: {
            readonly isBoolean: true;
        };
        readonly ignoreUnimportantViews: {
            readonly isBoolean: true;
        };
        readonly disableWindowAnimation: {
            readonly isBoolean: true;
        };
        readonly appWaitForLaunch: {
            readonly isBoolean: true;
        };
    }>)[]>;
    /**
     * Unzip the given app path and return the first package that has SUPPORTED_EXTENSIONS
     * in the archived file.
     *
     * @param {string} appPath The path to app file.
     * @returns {Promise<string>} Retuns the path to an unzipped app file path.
     * @throws Raise an exception if the zip did not have any SUPPORTED_EXTENSIONS packages.
     */
    unzipApp(appPath: string): Promise<string>;
    onPostConfigureApp({ cachedAppInfo, isUrl, appPath }: {
        cachedAppInfo: any;
        isUrl: any;
        appPath: any;
    }): Promise<false | {
        appPath: any;
    }>;
    startEspressoSession(): Promise<void>;
    setWindowAnimationState(isEnabled: any): Promise<void>;
    wasAnimationEnabled: boolean | undefined;
    initWebview(): Promise<void>;
    addDeviceInfoToCaps(): Promise<void>;
    initEspressoServer(): void;
    initAUT(): Promise<void>;
    deleteSession(): Promise<void>;
    onSettingsUpdate(): Promise<void>;
    proxyActive(sessionId: any): boolean;
    canProxy(sessionId: any): boolean;
    getProxyAvoidList(sessionId: any): import("@appium/types").RouteMatcher[];
    get appOnDevice(): boolean;
    executeMobile: (this: EspressoDriver, mobileCommand: string, opts?: Record<string, any> | undefined) => Promise<any>;
    launchApp: (this: EspressoDriver) => Promise<never>;
    closeApp: (this: EspressoDriver) => Promise<never>;
    reset: (this: EspressoDriver) => Promise<never>;
    getClipboard: (this: EspressoDriver) => Promise<unknown>;
    mobileSwipe: (this: EspressoDriver, opts?: {}) => Promise<unknown>;
    mobilePressKey: (this: EspressoDriver, opts?: import("./commands/general").PressKeyOptions | undefined) => Promise<void>;
    mobileBackgroundApp: (this: EspressoDriver, opts?: import("./commands/general").BackgroundAppOptions | undefined) => Promise<string | true>;
    mobileGetDeviceInfo: (this: EspressoDriver) => Promise<import("./types").DeviceInfo>;
    mobileIsToastVisible: (this: EspressoDriver, opts?: {}) => Promise<unknown>;
    mobileOpenDrawer: (this: EspressoDriver, opts?: {}) => Promise<unknown>;
    mobileCloseDrawer: (this: EspressoDriver, opts?: {}) => Promise<unknown>;
    mobileSetDate: (this: EspressoDriver, opts?: {}) => Promise<unknown>;
    mobileSetTime: (this: EspressoDriver, opts?: {}) => Promise<unknown>;
    mobileNavigateTo: (this: EspressoDriver, opts?: {}) => Promise<unknown>;
    mobileWebAtoms: (this: EspressoDriver, opts?: {}) => Promise<unknown>;
    mobileScrollToPage: (this: EspressoDriver, opts?: {}) => Promise<unknown>;
    mobileBackdoor: (this: EspressoDriver, opts?: {}) => Promise<any>;
    mobileUiautomator: (this: EspressoDriver, opts?: {}) => Promise<unknown>;
    mobileUiautomatorPageSource: (this: EspressoDriver) => Promise<string>;
    mobileFlashElement: (this: EspressoDriver, opts?: {}) => Promise<unknown>;
    mobileClickAction: (this: EspressoDriver, opts?: {}) => Promise<unknown>;
    updateSettings: (this: EspressoDriver, settings: import("./commands/general").SettingsOptions) => Promise<void>;
    getSettings: (this: EspressoDriver) => Promise<{}>;
    mobileStartActivity: (this: EspressoDriver, opts: import("./commands/general").StartActivityOptions) => Promise<string>;
    startActivity: (this: EspressoDriver, appPackage: string, appActivity: string, appWaitPackage: string, appWaitActivity: string) => Promise<void>;
    mobileDismissAutofill: (this: EspressoDriver, opts?: {}) => Promise<void>;
    mobileStartService: (this: EspressoDriver, opts: import("./commands/services").StartServiceOptions) => Promise<string>;
    mobileStopService: (this: EspressoDriver, opts: import("./commands/services").StopServiceOptions) => Promise<string>;
    mobileScreenshots: (this: EspressoDriver, opts?: import("./commands/screenshot").ScreenshotsOpts | undefined) => Promise<any>;
    mobileRegisterIdlingResources: (this: EspressoDriver, opts: import("./commands/idling-resources").IdlingResourcesOptions) => Promise<unknown>;
    mobileUnregisterIdlingResources: (this: EspressoDriver, opts: import("./commands/idling-resources").IdlingResourcesOptions) => Promise<unknown>;
    mobileListIdlingResources: (this: EspressoDriver) => Promise<string[]>;
    mobileWaitForUIThread: (this: EspressoDriver) => Promise<unknown>;
}
import { AndroidDriver } from 'appium-android-driver';
import { EspressoRunner } from './espresso-runner';
import { DeviceSettings } from 'appium/driver';
//# sourceMappingURL=driver.d.ts.map