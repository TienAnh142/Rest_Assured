export default commands;
export type PerformEditorActionOpts = {
    action: string | number;
};
export type PressKeyOptions = {
    /**
     * A valid Android key code. See https://developer.android.com/reference/android/view/KeyEvent
     * for the list of available key codes
     */
    keycode?: number | undefined;
    /**
     * An integer in which each bit set to 1 represents a pressed meta key. See
     * https://developer.android.com/reference/android/view/KeyEvent for more details.
     */
    metastate?: number | undefined;
    /**
     * Flags for the particular key event. See
     * https://developer.android.com/reference/android/view/KeyEvent for more details.
     */
    flags?: number | undefined;
    /**
     * [false] Whether to emulate long key press
     */
    isLongPress?: boolean | undefined;
};
export type BackgroundAppOptions = {
    /**
     * The amount of seconds to wait between putting the app to background and restoring it.
     * Any negative value means to not restore the app after putting it to the background (the default behavior).
     */
    seconds?: number | undefined;
};
export type SettingsOptions = {
    /**
     * Settings parameters that is available in
     * https://github.com/appium/appium-espresso-driver#settings-api or enabled plugins.
     */
    Object: string | number | boolean;
};
export type StartActivityOptions = {
    appActivity: string;
    locale?: string | undefined;
    optionalIntentArguments?: string | undefined;
    optionalActivityArguments?: string | undefined;
};
export namespace commands {
    /**
     * @this {import('../driver').EspressoDriver}
     */
    function launchApp(this: import("../driver").EspressoDriver): Promise<never>;
    /**
     * @this {import('../driver').EspressoDriver}
     */
    function closeApp(this: import("../driver").EspressoDriver): Promise<never>;
    /**
     * @this {import('../driver').EspressoDriver}
     */
    function reset(this: import("../driver").EspressoDriver): Promise<never>;
    /**
     * @this {import('../driver').EspressoDriver}
     */
    function getClipboard(this: import("../driver").EspressoDriver): Promise<unknown>;
    /**
     * @typedef {Object} PerformEditorActionOpts
     * @property {string|number} action
     */
    /**
     * @this {import('../driver').EspressoDriver}
     * @param {PerformEditorActionOpts} opts
     * @returns {Promise<void>}
     */
    function mobilePerformEditorAction(this: import("../driver").EspressoDriver, opts: PerformEditorActionOpts): Promise<void>;
    /**
     * @this {import('../driver').EspressoDriver}
     */
    function mobileSwipe(this: import("../driver").EspressoDriver, opts?: {}): Promise<unknown>;
    /**
     * @typedef {Object} PressKeyOptions
     * @property {number} [keycode] A valid Android key code. See https://developer.android.com/reference/android/view/KeyEvent
     * for the list of available key codes
     * @property {number} [metastate] An integer in which each bit set to 1 represents a pressed meta key. See
     * https://developer.android.com/reference/android/view/KeyEvent for more details.
     * @property {number} [flags] Flags for the particular key event. See
     * https://developer.android.com/reference/android/view/KeyEvent for more details.
     * @property {boolean} [isLongPress] [false] Whether to emulate long key press
     */
    /**
     * Emulates key press event.
     *
     * @this {import('../driver').EspressoDriver}
     * @param {PressKeyOptions} [opts={}]
     */
    function mobilePressKey(this: import("../driver").EspressoDriver, opts?: PressKeyOptions | undefined): Promise<void>;
    /**
     * @typedef {Object} BackgroundAppOptions
     * @property {number} [seconds] The amount of seconds to wait between putting the app to background and restoring it.
     * Any negative value means to not restore the app after putting it to the background (the default behavior).
     */
    /**
     * Puts the app under test to the background
     * and then restores it (if needed). The call is blocking is the
     * app needs to be restored afterwards.
     *
     * @this {import('../driver').EspressoDriver}
     * @param {BackgroundAppOptions} [opts={}]
     */
    function mobileBackgroundApp(this: import("../driver").EspressoDriver, opts?: BackgroundAppOptions | undefined): Promise<string | true>;
    /**
     * @this {import('../driver').EspressoDriver}
     * @returns {Promise<import('../types').DeviceInfo>}
     */
    function mobileGetDeviceInfo(this: import("../driver").EspressoDriver): Promise<import("../types").DeviceInfo>;
    /**
     * @this {import('../driver').EspressoDriver}
     */
    function mobileIsToastVisible(this: import("../driver").EspressoDriver, opts?: {}): Promise<unknown>;
    /**
     * @this {import('../driver').EspressoDriver}
     */
    function mobileOpenDrawer(this: import("../driver").EspressoDriver, opts?: {}): Promise<unknown>;
    /**
     * @this {import('../driver').EspressoDriver}
     */
    function mobileCloseDrawer(this: import("../driver").EspressoDriver, opts?: {}): Promise<unknown>;
    /**
     * @this {import('../driver').EspressoDriver}
     */
    function mobileSetDate(this: import("../driver").EspressoDriver, opts?: {}): Promise<unknown>;
    /**
     * @this {import('../driver').EspressoDriver}
     */
    function mobileSetTime(this: import("../driver").EspressoDriver, opts?: {}): Promise<unknown>;
    /**
     * @this {import('../driver').EspressoDriver}
     */
    function mobileNavigateTo(this: import("../driver").EspressoDriver, opts?: {}): Promise<unknown>;
    /**
     * Runs a chain of Espresso web atoms (see https://developer.android.com/training/testing/espresso/web for reference)
     *
     * Takes JSON of the form
     *
     * {
     *   "webviewEl": "<ELEMENT_ID>", // optional webview element to operate on
     *   "forceJavascriptEnabled": true|false, // if webview disables javascript, webatoms won't work, this forces it
     *   "methodChain": [
     *     {"name": "methodName", "atom": {"name": "atomName", "args": ["arg1", "arg2", ...]}},
     *     ...
     *   ]
     * }
     * @this {import('../driver').EspressoDriver}
     */
    function mobileWebAtoms(this: import("../driver").EspressoDriver, opts?: {}): Promise<unknown>;
    /**
     * @this {import('../driver').EspressoDriver}
     * @returns {Promise<number>}
     */
    function getDisplayDensity(this: import("../driver").EspressoDriver): Promise<number>;
    /**
     *
     * @this {import('../driver').EspressoDriver}
     */
    function mobileScrollToPage(this: import("../driver").EspressoDriver, opts?: {}): Promise<unknown>;
    /**
     *  API to invoke methods defined in Android app.
     *
     *  Example data
     *  {
     *   target: 'activity',
     *   methods:
     *         [
     *           {
     *               name: "someMethod",
     *           },
     *           {
     *               name: "anotherMethod",
     *               args:
     *                   [
     *                       {value: "Lol", type: 'java.lang.CharSequence'},
     *                       {value: 1, type: 'int'}
     *                   ]
     *           }
     *         ]
     * }
     *
     * In above example, method "someMethod" will be invoked on 'activity'. On the result, "anotherMethod" will be invoked
     *  "target" can be either 'activity', 'application' or 'element'
     *  If target is set to 'application', methods will be invoked on application class
     *  If target is set to 'activity', methods will be invoked on current activity
     *  If target is set to 'element', 'elementId' must be specified
     *
     * - Only 'Public' methods can be invoked. ('open' modifire is necessary in Kotlin)
     * - following primitive types are supported: "int", "boolean", "byte", "short", "long", "float", "char"
     * -  Non-primitive types with fully qualified name "java.lang.*" is also supported:
     *                              Eg. "java.lang.CharSequence", "java.lang.String", "java.lang.Integer", "java.lang.Float",
     *                              "java.lang.Double", "java.lang.Boolean", "java.lang.Long", "java.lang.Short",
     *                              "java.lang.Character" etc...
     *
     *
     * @throws {Error} if target is not 'activity' or 'application'
     * @throws {Error} if a method is not found with given argument types
     * @this {import('../driver').EspressoDriver}
     * @return {Promise<any>} the result of the last method in the invocation chain. If method return type is void, then "<VOID>" will be returned
     *
     */
    function mobileBackdoor(this: import("../driver").EspressoDriver, opts?: {}): Promise<any>;
    /**
     *  Execute UiAutomator2 commands to drive out of app areas.
     *  strategy can be one of: "clazz", "res", "text", "textContains", "textEndsWith", "textStartsWith",
     *                          "desc", "descContains", "descEndsWith", "descStartsWith", "pkg"
     *
     *  action can be one of: "click", "longClick", "getText", "getContentDescription", "getClassName",
     *                        "getResourceName", "getVisibleBounds", "getVisibleCenter", "getApplicationPackage",
     *                        "getChildCount", "clear", "isCheckable", "isChecked", "isClickable", "isEnabled",
     *                        "isFocusable", "isFocused", "isLongClickable", "isScrollable", "isSelected"
     * @this {import('../driver').EspressoDriver}
     */
    function mobileUiautomator(this: import("../driver").EspressoDriver, opts?: {}): Promise<unknown>;
    /**
     * Execute UiAutomator2 command to return the UI dump when AUT is in background.
     * @this {import('../driver').EspressoDriver}
     * @throws  {Error} if uiautomator view dump is unsuccessful
     * @returns {Promise<string>} uiautomator DOM xml as string
     */
    function mobileUiautomatorPageSource(this: import("../driver").EspressoDriver): Promise<string>;
    /**
     * Flash the element with given id.
     * durationMillis and repeatCount are optional
     * @this {import('../driver').EspressoDriver}
     */
    function mobileFlashElement(this: import("../driver").EspressoDriver, opts?: {}): Promise<unknown>;
    /**
     * Perform a 'GeneralClickAction' (https://developer.android.com/reference/androidx/test/espresso/action/GeneralClickAction)
     * @this {import('../driver').EspressoDriver}
     */
    function mobileClickAction(this: import("../driver").EspressoDriver, opts?: {}): Promise<unknown>;
    /**
     * @typedef {Object} SettingsOptions
     * @property {!string|number|boolean} Object Settings parameters that is available in
     * https://github.com/appium/appium-espresso-driver#settings-api or enabled plugins.
     */
    /**
     * Apply the given settings to the espresso driver and the espresso server.
     * Errors by the espresso server will be printed as log, but it does not return an error message.
     * @param {SettingsOptions} settings
     * @this {import('../driver').EspressoDriver}
     */
    function updateSettings(this: import("../driver").EspressoDriver, settings: SettingsOptions): Promise<void>;
    /**
     * @this {import('../driver').EspressoDriver}
     */
    function getSettings(this: import("../driver").EspressoDriver): Promise<{}>;
    /**
     * @typedef {Object} StartActivityOptions
     * @property {string} appActivity
     * @property {string} [locale]
     * @property {string} [optionalIntentArguments]
     * @property {string} [optionalActivityArguments]
     */
    /**
     * Starts the given activity with intent options, activity options and locale.
     * Activity could only be executed in scope of the current app package.
     *
     * @this {import('../driver').EspressoDriver}
     * @param {StartActivityOptions} opts
     * @returns {Promise<string>}
     */
    function mobileStartActivity(this: import("../driver").EspressoDriver, opts: StartActivityOptions): Promise<string>;
    /**
     *
     * @this {import('../driver').EspressoDriver}
     * @param {string} appPackage
     * @param {string} appActivity
     * @param {string} appWaitPackage
     * @param {string} appWaitActivity
     */
    function startActivity(this: import("../driver").EspressoDriver, appPackage: string, appActivity: string, appWaitPackage: string, appWaitActivity: string): Promise<void>;
    /**
     * @this {import('../driver').EspressoDriver}
     */
    function mobileDismissAutofill(this: import("../driver").EspressoDriver, opts?: {}): Promise<void>;
}
//# sourceMappingURL=general.d.ts.map