export default commands;
export type StartServiceOptions = {
    /**
     * - The name of the service intent to start, for example
     * `com.some.package.name/.YourServiceSubClassName`. This option is mandatory.
     * !!! Only services in the app's under test scope could be started.
     */
    intent: string;
    /**
     * - Set it to `true` if your service must be
     * started as foreground service.
     */
    foreground?: boolean | undefined;
};
export type StopServiceOptions = {
    /**
     * - The name of the service intent to stop, for example
     * `com.some.package.name/.YourServiceSubClassName`. This option is mandatory.
     * !!! Only services in the app's under test scope could be stopped.
     */
    intent: string;
};
export namespace commands {
    /**
     * @typedef {Object} StartServiceOptions
     * @property {!string} intent - The name of the service intent to start, for example
     * `com.some.package.name/.YourServiceSubClassName`. This option is mandatory.
     * !!! Only services in the app's under test scope could be started.
     * @property {boolean} [foreground=false] - Set it to `true` if your service must be
     * started as foreground service.
     */
    /**
     * Starts the given service intent.
     *
     * @this {import('../driver').EspressoDriver}
     * @param {StartServiceOptions} opts
     * @returns {Promise<string>} The full component name
     * @throws {Error} If there was a failure while starting the service
     * or required options are missing
     */
    function mobileStartService(this: import("../driver").EspressoDriver, opts: StartServiceOptions): Promise<string>;
    /**
     * @typedef {Object} StopServiceOptions
     * @property {string} intent - The name of the service intent to stop, for example
     * `com.some.package.name/.YourServiceSubClassName`. This option is mandatory.
     * !!! Only services in the app's under test scope could be stopped.
     */
    /**
     * Stops the given service intent.
     *
     * @this {import('../driver').EspressoDriver}
     * @param {StopServiceOptions} opts
     * @returns {Promise<string>} `true` if the service has been successfully stopped
     * @throws {Error} If there was a failure while stopping the service
     * or required options are missing
     */
    function mobileStopService(this: import("../driver").EspressoDriver, opts: StopServiceOptions): Promise<string>;
}
//# sourceMappingURL=services.d.ts.map