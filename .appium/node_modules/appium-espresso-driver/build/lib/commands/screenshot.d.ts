export default commands;
/**
 * A dictionary where each key contains a unique display identifier
 * and values are dictionaries with following items:
 * - id: Display identifier
 * - name: Display name, could be empty
 * - isDefault: Whether this display is the default one
 * - payload: The actual PNG screenshot data encoded to base64 string
 */
export type ScreenshotsInfo = any;
export type ScreenshotsOpts = {
    /**
     * Android display identifier to take a screenshot for.
     * If not provided then screenshots of all displays are going to be returned.
     * If no matches were found then an error is thrown.
     */
    displayId?: string | number | undefined;
};
declare namespace commands {
    /**
     * @typedef {Object} ScreenshotsInfo
     *
     * A dictionary where each key contains a unique display identifier
     * and values are dictionaries with following items:
     * - id: Display identifier
     * - name: Display name, could be empty
     * - isDefault: Whether this display is the default one
     * - payload: The actual PNG screenshot data encoded to base64 string
     */
    /**
     * @typedef {Object} ScreenshotsOpts
     * @property {number|string} [displayId] Android display identifier to take a screenshot for.
     * If not provided then screenshots of all displays are going to be returned.
     * If no matches were found then an error is thrown.
     */
    /**
     * Retrieves screenshots of each display available to Android.
     * This functionality is only supported since Android 10.
     *
     * @this {import('../driver').EspressoDriver}
     * @param {ScreenshotsOpts} [opts={}]
     * @returns {Promise<ScreenshotsInfo>}
     */
    function mobileScreenshots(this: import("../driver").EspressoDriver, opts?: ScreenshotsOpts | undefined): Promise<any>;
}
//# sourceMappingURL=screenshot.d.ts.map